#include "plateitem.h"
#define DEBUG_PLATE_ZONE 1

#include <QPainter>
#include <QGraphicsSceneMouseEvent>
#include <cmath>

#include <QDebug>

PlateItem::PlateItem(QGraphicsItem *parent) :
    QGraphicsObject(parent),
    _radius(300),
    _rotation(0),
    _rotatable(false)
{
}
/*! Generated by script */
void PlateItem::setRadius (qreal radius)
{
    if (_radius != radius) {
        prepareGeometryChange();
        _radius = radius;
        if (! background().isNull()) {
            int d = static_cast<int>(radius * 2.0);
            setBackground(background().scaled(d, d, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));
        }
        emit radiusChanged(radius);
    }
}

/*! Generated by script */
qreal PlateItem::radius () const
{
    return _radius;
}

/*! Generated by script */
void PlateItem::setBackground (const QPixmap & background)
{
    int d = static_cast<int>(radius() * 2.0);
    _background = background.scaled(d, d);
    update();
    emit backgroundChanged(background);
}

/*! Generated by script */
const QPixmap & PlateItem::background () const
{
    return _background;
}

/*! Generated by script */
void PlateItem::setRotation (qreal rotation)
{
    if (_rotation != rotation) {
        _rotation = rotation;
        emit rotationChanged(rotation);
    }
}

/*! Generated by script */
qreal PlateItem::rotation () const
{
    return _rotation;
}

/*! Generated by script */
void PlateItem::setRotatable (bool rotatable)
{
    if (_rotatable != rotatable) {
        _rotatable = rotatable;
        emit rotatableChanged(rotatable);
    }
}

/*! Generated by script */
bool PlateItem::rotatable () const
{
    return _rotatable;
}

QRectF PlateItem::boundingRect() const
{
    qreal rad = radius();
    qreal d = rad * 2.0;
    return QRectF(-rad, -rad, d, d);
}

void PlateItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(option);
    Q_UNUSED(widget);
#if DEBUG_PLATE_ZONE
    painter->drawEllipse(boundingRect());
#endif /* DEBUG_PIEPLATE_ZONE */
    QRectF bound(boundingRect());
    if (! _background.isNull()) {
        painter->drawPixmap(bound.topLeft(), _background);
    }
}

void PlateItem::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
    _origPoint = event->pos();
    _curRotation = 0;

    //QGraphicsObject::mousePressEvent(event);
}

static qreal radToAngle (qreal rad)
{
    return rad * 180.0 / M_PI;
}


void PlateItem::mouseMoveEvent(QGraphicsSceneMouseEvent *event)
{
    qreal x = event->lastPos().x();
    qreal y = event->lastPos().y();
    qreal cx = event->pos().x();
    qreal cy = event->pos().y();
    qreal dx = cx - x;
    qreal dy = cy - y;
    qreal sign = - dx * y + dy * x; // create a 正交 vector
    int sn = (sign > 0) ? 1 : -1;

    qreal vecmul = x * cx + y * cy;
    qreal lenmul = sqrt ((cx * cx + cy * cy) * (x * x + y * y));

    qreal cosa = vecmul / lenmul;
    qreal sina = sn * sqrt (1 - cosa * cosa);

    qDebug() << "dx =" << cx << "dy =" << cy << "sin =" << sina << "cos =" << cosa;

    QTransform origtrans = transform();
    QTransform rot(cosa, sina, -sina, cosa, 0, 0);
    setTransform(origtrans * rot);

}

void PlateItem::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
{
    QTransform transf = transform();
    qDebug() << transf;
}
